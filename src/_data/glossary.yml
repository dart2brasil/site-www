# <!-- ia-translate: true -->
- term: "Assist (Auxílio)"
  short_description: |-
    Uma edição de código local e automatizada com o objetivo de realizar melhorias comuns no código.
  long_description: |-
    Um assist (auxílio) é uma edição de código local e automatizada com o objetivo de realizar
    melhorias comuns no código.
    Exemplos de assist incluem converter declarações `switch` em expressões `switch`,
    inverter os blocos `then` e `else` em uma declaração `if` e
    inserir widgets em uma estrutura de widgets.
  related_links:
    - text: "Refatorar"
      link: "#refactor-refatorar"
  labels:
    - "ferramentas"
    - "analisador"
  alternate:
    - "Quick assist (Auxílio rápido)"

- term: "Constant context (Contexto constante)"
  short_description: |-
    Uma região de código onde a palavra-chave const é implícita e tudo dentro
    dessa região deve ser uma constante.
  long_description: |-
    Um _contexto constante_ é uma região de código na qual não é necessário
    incluir a palavra-chave `const` porque ela é implícita pelo fato de que
    tudo naquela região é exigido para ser uma constante.
    As seguintes localizações são contextos constantes:

    - Tudo dentro de um literal de lista, mapa ou conjunto que é prefixado
      pela palavra-chave `const`. Por exemplo:

      ```dart
      var l = const [/*contexto constante*/];
      ```

    - Os argumentos dentro de uma invocação de um construtor constante.
      Por exemplo:

      ```dart
      var p = const Point(/*contexto constante*/);
      ```
  
    - O inicializador para uma variável que é prefixada pela palavra-chave `const`.
      Por exemplo:

      ```dart
      const v = /*contexto constante*/;
      ```

    - Anotações.

    - A expressão em uma cláusula `case`. Por exemplo:

      ```dart
      void f(int e) {
        switch (e) {
          case /*contexto constante*/:
            break;
        }
      }
      ```
  related_links:
    - text: "Variáveis final e const"
      link: "/language/variables#final-and-const"
    - text: "Não use const de forma redundante"
      link: "/effective-dart/usage#dont-use-const-redundantly"
  labels:
    - "linguagem"
    - "const"
    - "understanding diagnostics (entendendo diagnósticos)"
  alternate:
    - "Implicit const (Const implícito)"

- term: "Definite assignment (Atribuição definitiva)"
  short_description: |-
    A determinação de se uma variável foi definitivamente
    atribuída a um valor antes de ser usada.
  long_description: |-
    A análise de atribuição definitiva é o processo de determinar, para cada
    variável local em cada ponto do código, qual das seguintes opções é verdadeira:

    - A variável foi definitivamente atribuída a um valor
      (_definitivamente atribuída_).
    - A variável definitivamente não foi atribuída a um valor
      (_definitivamente não atribuída_).
    - A variável pode ou não ter sido atribuída a um valor,
      dependendo do caminho de execução percorrido para chegar a esse ponto.

    A análise de atribuição definitiva ajuda a encontrar problemas no código,
    como lugares onde uma variável que pode não ter sido
    atribuída a um valor está sendo referenciada, ou
    lugares onde uma variável que só pode ser atribuída a um valor uma vez está
    sendo atribuída depois que ela já pode ter sido atribuída a um valor.

    Por exemplo, no código a seguir, a variável `s` é
    definitivamente não atribuída quando é passada como um argumento para `print`:

    ```dart
    void f() {
      String s;
      print(s);
    }
    ```

    Mas no código a seguir, a variável `s` é definitivamente atribuída:

    ```dart
    void f(String name) {
      String s = 'Olá $name!';
      print(s);
    }
    ```

    A análise de atribuição definitiva pode até dizer se
    uma variável é definitivamente atribuída (ou não atribuída) quando
    há vários caminhos de execução possíveis.
    No código a seguir, a função `print` é chamada se
    a execução passar pelo ramo verdadeiro ou falso da
    declaração `if`, mas como `s` é atribuído, não importa qual ramo seja tomado,
    é definitivamente atribuída antes de ser passada para `print`:

    ```dart
    void f(String name, bool casual) {
      String s;
      if (casual) {
        s = 'Oi $name!';
      } else {
        s = 'Olá $name!';
      }
      print(s);
    }
    ```

    Na análise de fluxo, o final da declaração `if` é referido
    como um _join_—um lugar onde dois ou mais caminhos de execução se juntam novamente.
    Onde há um join, a análise diz que
    uma variável é definitivamente atribuída se ela for definitivamente atribuída ao longo
    de todos os caminhos que estão se unindo, e definitivamente não atribuída se
    ela for definitivamente não atribuída ao longo de todos os caminhos.

    Às vezes, uma variável recebe um valor em um caminho, mas não em outro,
    caso em que a variável pode ou não ter sido atribuída a um valor.
    No exemplo a seguir, o ramo verdadeiro da declaração `if` pode ou
    não ser executado, então a variável pode ou não ser atribuída a um valor:

    ```dart
    void f(String name, bool casual) {
      String s;
      if (casual) {
        s = 'Oi $name!';
      }
      print(s);
    }
    ```

    O mesmo é verdadeiro se houver um ramo falso que
    não atribui um valor a `s`.

    A análise de loops é um pouco mais complicada,
    mas segue o mesmo raciocínio básico.
    Por exemplo, a condição em um loop `while` é sempre executada,
    mas o corpo pode ou não ser. Portanto, assim como uma declaração `if`,
    há um join no final da declaração `while` entre
    o caminho no qual a condição é `true` e
    o caminho no qual a condição é `false`.
  related_links:
    - text: "Especificação de atribuição definitiva"
      link: "https://github.com/dart-lang/language/blob/main/resources/type-system/flow-analysis.md"
    - text: "Entendendo a análise de atribuição definitiva"
      link: "/null-safety/understanding-null-safety#definite-assignment-analysis"
  labels:
    - "language"
    - "flow analysis (análise de fluxo)"
    - "understanding diagnostics (entendendo diagnósticos)"

- term: "Function (Função)"
  short_description: |-
    Um termo abrangente para se referir a funções de nível superior,
    funções locais, métodos estáticos e métodos de instância.
  related_links:
    - text: "Visão geral das funções"
      link: "/language/functions"
    - text: "Métodos de instância"
      link: "/language/methods"
  labels:
    - "language"
    - "umbrella term (termo abrangente)"
  alternate:
    - "Procedure (Procedimento)"

- term: "Irrefutable pattern (Padrão irrefutável)"
  short_description: |-
    Um padrão que sempre corresponde.
  long_description: |-
    _Padrões irrefutáveis_ são padrões que sempre correspondem.
    Padrões irrefutáveis são os únicos padrões que podem aparecer em
    _contextos irrefutáveis_: os contextos de padrão
    de [_declaração_][] e [_atribuição_][].

    [_declaração_]: /language/patterns#variable-declaration
    [_atribuição_]: /language/patterns#variable-assignment
  related_links:
    - text: "Onde os padrões podem aparecer"
      link: "/language/patterns#places-patterns-can-appear"
    - text: "Mergulhe em padrões e registros do Dart"
      link: "https://codelabs.developers.google.com/codelabs/dart-patterns-records"
  labels:
    - "language"
    - "patterns (padrões)"
  alternate:
    - "irrefutable context (contexto irrefutável)"

- term: "Mixin application (Aplicação de mixin)"
  short_description: |-
    Uma classe criada quando um mixin é aplicado a uma classe.
  long_description: |-
    Uma _aplicação de mixin_ é a classe criada quando
    um mixin é aplicado a uma classe.
    Por exemplo, considere as seguintes declarações:

    ```dart
    class A {}

    mixin M {}

    class B extends A with M {}
    ```

    A classe `B` é uma subclasse da aplicação de mixin de `M` para `A`,
    às vezes denominada como `A+M`. A classe `A+M` é uma subclasse de `A` e
    possui membros que são copiados de `M`.

    Você pode dar um nome real a uma aplicação de mixin definindo-a como:

    ```dart
    class A {}

    mixin M {}

    class A_M = A with M;
    ```

    Dada esta declaração de `A_M`, a seguinte declaração de `B` é
    equivalente à declaração de `B` no exemplo original:

    ```dart
    class B extends A_M {}
    ```
  related_links:
    - text: "Mixins em Dart"
      link: "/language/mixins"
  labels:
    - "language"
    - "understanding diagnostics (entendendo diagnósticos)"
  alternate:
    - "with mixin (com mixin)"

- term: "Override inference (Inferência de override)"
  short_description: |-
    Como os tipos ausentes em uma declaração de método são inferidos.
  long_description: |-
    A inferência de override é o processo pelo qual quaisquer tipos ausentes em
    uma declaração de método são inferidos com base nos tipos correspondentes do
    método ou métodos que ele sobrescreve.

    Se um método candidato (o método que está faltando informações de tipo)
    sobrescreve um único método herdado, então os
    tipos correspondentes do método sobrescrito são inferidos.
    Por exemplo, considere o seguinte código:

    ```dart
    class A {
      int m(String s) => 0;
    }

    class B extends A {
      @override
      m(s) => 1;
    }
    ```

    A declaração de `m` em `B` é uma candidata porque
    está faltando tanto o tipo de retorno quanto o tipo de parâmetro.
    Como ele sobrescreve um único método (o método `m` em `A`),
    os tipos do método sobrescrito serão usados para inferir
    os tipos ausentes e será como se o método em `B` tivesse sido
    declarado como `int m(String s) => 1;`.

    Se um método candidato sobrescreve vários métodos, e
    o tipo de função de um desses métodos sobrescritos, M<sub>s</sub>,
    é um supertipo dos tipos de função de todos os outros métodos sobrescritos,
    então M<sub>s</sub> é usado para inferir os tipos ausentes.
    Por exemplo, considere o seguinte código:

    ```dart
    class A {
      int m(num n) => 0;
    }

    class B {
      num m(int i) => 0;
    }

    class C implements A, B {
      @override
      m(n) => 1;
    }
    ```

    A declaração de `m` em `C` é uma candidata para inferência de override porque
    está faltando tanto o tipo de retorno quanto o tipo de parâmetro.
    Ele sobrescreve tanto `m` em `A` quanto `m` em `B`, então o compilador precisa
    escolher um deles a partir do qual os tipos ausentes podem ser inferidos.
    Mas como o tipo de função de `m` em `A` (`int Function(num)`) é
    um supertipo do tipo de função de `m` em `B` (`num Function(int)`),
    a função em `A` é usada para inferir os tipos ausentes. O resultado é
    o mesmo que declarar o método em `C` como `int m(num n) => 1;`.

    É um erro se nenhum dos métodos sobrescritos tiver um tipo de função que
    seja um supertipo de todos os outros métodos sobrescritos.
  related_links:
    - text: "Herança em Dart"
      link: "/language/extend"
  labels:
    - "language"
    - "type inference (inferência de tipo)"
    - "understanding diagnostics (entendendo diagnósticos)"

- term: "Part file (Arquivo de parte)"
  short_description: |-
    Um arquivo fonte Dart que contém uma diretiva `part of`.
  long_description: |-
    Um arquivo de parte é um arquivo fonte Dart que contém uma diretiva `part of`
    e é incluído em uma biblioteca usando a diretiva `part`.
  related_links:
    - text: "Orientação sobre bibliotecas e partes"
      link: "/tools/pub/create-packages#organizing-a-package"
    - text: "Use URIs de biblioteca em diretivas `part of`"
      link: "/effective-dart/usage#do-use-strings-in-part-of-directives"
  labels:
    - "language"
    - "libraries (bibliotecas)"
  alternate:
    - "part (parte)"

- term: "Potentially non-nullable (Potencialmente não anulável)"
  short_description: |-
    Um tipo que é explicitamente não anulável ou
    devido a ser um parâmetro de tipo.
  long_description: |-
    Um tipo é _potencialmente não anulável_ se for
    explicitamente não anulável ou se for um parâmetro de tipo.

    Um tipo é explicitamente não anulável se for um
    nome de tipo que não é seguido por um ponto de interrogação (`?`).
    Observe que existem alguns tipos que são sempre anuláveis, como
    `Null` e `dynamic`, e que `FutureOr` só é não anulável se
    não for seguido por um ponto de interrogação _e_
    o argumento de tipo for não anulável (como `FutureOr<String>`).

    Os parâmetros de tipo são potencialmente não anuláveis porque o real
    tipo de tempo de execução (o tipo especificado como um argumento de tipo) pode ser não anulável.
    Por exemplo, dada uma declaração de `class C<T> {}`,
    o tipo `C` poderia ser usado com um argumento de tipo não anulável como em `C<int>`.
  related_links:
    - text: "Anulabilidade e genéricos"
      link: "/null-safety/understanding-null-safety#nullability-and-generics"
  labels:
    - "language"
    - "type system (sistema de tipos)"
    - "flow analysis (análise de fluxo)"
    - "understanding diagnostics (entendendo diagnósticos)"
  alternate:
    - "potentially nullable (potencialmente anulável)"

- term: "Public library (Biblioteca pública)"
  short_description: |-
    Uma biblioteca que está localizada no diretório `lib` de um pacote, mas
    não dentro do diretório `lib/src`.
  long_description: |-
    Uma biblioteca pública é uma biblioteca que está localizada dentro do diretório `lib` do pacote,
    mas não dentro do diretório `lib/src`.
  related_links:
    - text: "Organizando as bibliotecas de um pacote"
      link: "/tools/pub/create-packages#organizing-a-package"
    - text: "Diretórios públicos de pacotes"
      link: "/tools/pub/package-layout#public-directories"
  labels:
    - "language"
    - "libraries (bibliotecas)"

- term: "Quick fix (Correção rápida)"
  short_description: |-
    Uma edição de código local e automatizada com o objetivo de corrigir o
    problema relatado por um diagnóstico específico.
  related_links:
    - text: "Correções rápidas para problemas de análise"
      link: "https://medium.com/dartlang/quick-fixes-for-analysis-issues-c10df084971a"
    - text: "Mensagens de diagnóstico"
      link: "/tools/diagnostic-messages"
    - text: "Regras do Linter"
      link: "/tools/linter-rules"
  labels:
    - "tools"
    - "understanding diagnostics (entendendo diagnósticos)"

- term: "Refactor (Refatorar)"
  short_description: |-
    Uma edição de código direcionada a modificações que não são locais ou
    que exigem interação do usuário.
  long_description: |-
    Um refactor (refatoração) é uma edição de código direcionada a modificações que não são locais
    ou que exigem interação do usuário.
    Exemplos de refactors incluem renomear, remover ou extrair código.
  related_links:
    - text: "Assist (Auxílio)"
      link: "#assist-auxílio"
  labels:
    - "tools"
    - "analysis (análise)"

- term: "Refutable pattern (Padrão refutável)"
  short_description: |-
    Um padrão que pode ser testado em relação a um valor.
  long_description: |-
    Um _padrão refutável_ é um padrão que pode ser testado em relação a um valor para
    determinar se o padrão corresponde ao valor.
    Caso contrário, o padrão _refuta_, ou nega, a correspondência.
    Padrões refutáveis aparecem em [_contextos de correspondência_][].

    [_contextos de correspondência_]: /language/patterns#matching
  related_links:
    - text: "Onde os padrões podem aparecer"
      link: "/language/patterns#places-patterns-can-appear"
    - text: "Mergulhe em padrões e registros do Dart"
      link: "https://codelabs.developers.google.com/codelabs/dart-patterns-records"
  labels:
    - "language"
    - "patterns (padrões)"
  alternate:
    - "matching contexts (contextos de correspondência)"

- term: "Subclass (Subclasse) {:#subclass}"
  short_description: |-
    Uma classe que herda a implementação de outra classe.
  long_description: |-
    Uma _subclasse_ é uma classe que herda a implementação de outra classe usando
    a palavra-chave [`extends`][] ou por [aplicação de mixin][].

    ```dart
    // A é uma subclasse de B; B é a superclasse de A.
    class A extends B {}

    // B1 tem a superclasse `A with M`, que tem a superclasse A.
    class B1 extends A with M {}
    ```

    Uma relação de subclasse também implica uma relação de [subtipo](#subtype) associada.
    Por exemplo, `class A` define implicitamente um tipo associado `A`
    que as instâncias da classe `A` habitam.
    Assim, `class A extends B` declara não apenas que a classe
    `A` é uma subclasse de `B`, mas também estabelece que o *tipo* `A` é um
    *subtipo* do tipo `B`.

    Relações de subclasse são um subconjunto de relações de subtipo.
    Quando a documentação diz "`S` deve ser um subtipo de `T`",
    é bom que `S` seja uma subclasse de `T`.
    No entanto, o inverso não é verdadeiro: nem todos os subtipos são subclasses.

    [`extends`]: /language/extend
    [aplicação de mixin]: #mixin-application-aplicação-de-mixin
  related_links:
    - text: "Herança em Dart"
      link: "/language/extend"
    - text: "Relação de subtipo"
      link: "#subtype"
  labels:
    - "language"
    - "type system (sistema de tipos)"
  alternate:
    - "child class (classe filha)"

- term: "Subtype (Subtipo) ${:#subtype}"
  short_description: |-
    Um tipo que pode ser usado onde quer que um valor de seu supertipo seja esperado.
  long_description: |-
    Uma relação de _subtipo_ é onde um valor de um determinado tipo é substituível
    onde o valor de outro tipo, o supertipo, é esperado.
    Por exemplo, se `S` é um subtipo de `T`,
    então você pode substituir um valor do tipo `S`
    onde um valor do tipo `T` é esperado.

    Um subtipo suporta todas as operações de seu supertipo
    (e possivelmente algumas operações extras).
    Na prática, isso significa que você pode atribuir o valor de um subtipo
    a qualquer local que espere o supertipo,
    e todos os métodos do supertipo estão disponíveis no subtipo.

    Isso é verdade pelo menos estaticamente.
    Uma API específica pode não permitir a substituição em tempo de execução,
    dependendo de suas operações.

    Algumas relações de subtipo são baseadas na estrutura do tipo,
    como com tipos anuláveis (por exemplo, `int` é um subtipo de `int?`)
    e tipos de função
    (por exemplo, `String Function()` é um subtipo de `void Function()`).

    Subtipos também podem ser introduzidos para classes por
    [implementação](/language/classes#implicit-interfaces)
    ou [herança](/language/extend) (direta ou indireta):

    ```dart
    // A é um subtipo de B, mas NÃO uma subclasse de B.
    class A implements B {}

    // C é um subtipo E uma subclasse de D.
    class C extends D {}
    ```
  related_links:
    - text: "Subclasse"
      link: "#subclass"
    - text: "Substituindo tipos"
      link: "/language/type-system#substituting-types"
  labels:
    - "language"
    - "type system (sistema de tipos)"
  alternate:
    - "subtyping (subtipagem)"
    - "subtype polymorphism (polimorfismo de subtipo)"

- term: "Variance and variance positions (Variância e posições de variância)"
  id: "variance"
  short_description: |-
    Como a mudança de um argumento de tipo de um tipo afeta a relação
    entre o tipo original e o resultante.

    Em Dart, alterar o argumento de tipo de uma
    declaração de tipo (como uma classe) ou tipo de retorno de função, altera a
    relação de tipo geral na mesma direção (covariante).

    No entanto, alterar o tipo dos tipos de parâmetro de uma função, altera a
    relação de tipo geral na direção oposta (contravariante).
  long_description: |-
    Um parâmetro de tipo de uma classe (ou outra declaração de tipo, como um mixin) é
    dito ser _covariante_ quando o tipo como um todo
    "co-varia" com o argumento de tipo real.
    Em outras palavras, se o argumento de tipo for substituído por um
    subtipo, então o tipo como um todo também é um subtipo.

    Por exemplo, o parâmetro de tipo da classe `List` é covariante porque
    os tipos de lista co-variam com seu argumento de tipo: `List<int>` é um subtipo de
    `List<Object>` porque `int` é um subtipo de `Object`.

    Em Dart, todos os parâmetros de tipo de todas as declarações de classe, mixin,
    classe mixin e enum são covariantes.

    No entanto, os tipos de função são diferentes:
    Um tipo de função é covariante em seu tipo de retorno, mas
    o oposto (conhecido como _contravariante_) em seus tipos de parâmetro.
    Por exemplo, o tipo `int Function(int)` é um
    subtipo do tipo `Object Function(int)`, mas é um
    supertipo de `int Function(Object)`.

    Isso faz sentido se você considerar sua [substituibilidade](#subtype).
    Se você chamar uma função com um tipo estático de `int Function(int)`,
    essa função pode realmente ser do tipo `int Function(Object)` em tempo de execução.
    Com base no tipo estático, você espera poder passar um `int` para ele.
    Isso será bom, pois a função realmente aceita qualquer `Object`,
    e isso inclui todos os objetos do tipo `int`.
    Da mesma forma, o resultado retornado será do tipo `int`,
    que também é o que você espera com base no tipo estático.

    Portanto, `int Function(Object)` é um subtipo de `int Function(int)`.

    Observe que tudo é virado de cabeça para baixo para os tipos de parâmetro.
    Em particular, esta relação de subtipo entre tipos de função exige que
    a relação de subtipo _oposta_ exista para o tipo de parâmetro.
    Por exemplo, `void Function(Object)` é um subtipo de `void Function(int)`
    porque `int` é um subtipo de `Object`.

    Com um tipo mais complexo como `List<void Function(int)>`,
    você tem que considerar as _posições_ no tipo.
    Para conseguir isso, transforme uma das partes do tipo em um espaço reservado,
    e então considere o que acontece com o tipo quando
    diferentes tipos são colocados nessa posição.

    Por exemplo, considere `List<void Function(_)>` como um modelo para
    um tipo onde você pode colocar diferentes tipos no lugar do espaço reservado `_`.
    Este tipo é contravariante na posição onde esse espaço reservado ocorre.

    O seguinte ilustra isso substituindo `Object` e `int` por `_`.
    `List<void Function(Object)>` é um subtipo de `List<void Function(int)>`
    porque `void Function(Object)` é um subtipo de `void Function(int)` porque
    `void` é um subtipo de `void` (os tipos de retorno) e
    `int` é um subtipo de `Object` (os tipos de parâmetro, na ordem oposta).
    Portanto, o tipo em `_` varia na direção oposta de
    o tipo `List<void Function(_)>` como um todo, e esta
    'direção oposta' por definição torna-o uma _posição contravariante_.

    Uma _posição covariante_ é definida de forma semelhante.
    Por exemplo, `_` está em uma posição covariante no tipo `List<_>`,
    e `_` também está em uma posição covariante no tipo `_ Function(int)`.

    Existe ainda outro tipo de posição conhecido como _invariante_,
    mas ocorre muito mais raramente, então os detalhes são omitidos aqui.

    Na prática, geralmente é suficiente saber que
    os argumentos de tipo de uma classe, mixin, etc. estão em uma posição covariante,
    e também o tipo de retorno de um tipo de função, mas
    os tipos de parâmetro estão em uma posição contravariante.
  related_links:
    - text: "Relação de subtipo"
      link: "#subtype"
    - text: "Covariância e contravariância"
      link: "https://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)"
    - text: "A palavra-chave covariant"
      link: "/language/type-system#covariant-keyword"
  labels:
    - "language"
    - "type system (sistema de tipos)"
    - "generics (genéricos)"
  alternate:
    - "variance positions (posições de variância)"
    # TODO: Covariant and contravariant could/should have their own entries.
    - "covariance (covariância)"
    - "covariant (covariante)"
    - "contravariance (contravariância)"
    - "contravariant (contravariante)"
